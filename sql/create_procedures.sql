/* PROCEDURES */

CREATE OR REPLACE PROCEDURE ADD_CONFERENCE(
  i_conf_name IN CONFERENCES.CONFERENCE_NAME%TYPE,
  i_country IN CONFERENCES.COUNTRY%TYPE,
  i_city IN CONFERENCES.CITY%TYPE,
  i_address IN CONFERENCES.ADDRESS%TYPE,
  i_first_day IN CONFERENCES.FIRST_DAY%TYPE,
  i_last_day IN CONFERENCES.LAST_DAY%TYPE,
  i_student_discount IN CONFERENCES.STUDENT_DISCOUNT%TYPE DEFAULT 0
) AS
BEGIN
  INSERT INTO CONFERENCES(CONFERENCE_NAME, COUNTRY, CITY, ADDRESS, FIRST_DAY, LAST_DAY, STUDENT_DISCOUNT)
    VALUES(i_conf_name, i_country, i_city, i_address, i_first_day, i_last_day, i_student_discount);
END;


CREATE OR REPLACE PROCEDURE ADD_CONFERENCE_DAY(
  i_conf_id IN CONFERENCE_DAYS.CONFERENCE_ID%TYPE,
  i_price IN CONFERENCE_DAYS.PRICE%TYPE,
  i_limit IN CONFERENCE_DAYS.LIMIT%TYPE,
  i_day_date IN CONFERENCE_DAYS.DAY_DATE%TYPE
) AS
BEGIN
  INSERT INTO CONFERENCE_DAYS(CONFERENCE_ID, PRICE, LIMIT, DAY_DATE)
    VALUES(i_conf_id, i_price, i_limit, i_day_date);
END;


CREATE OR REPLACE PROCEDURE ADD_WORKSHOPS(
  i_conf_day_id IN WORKSHOPS.CONF_DAY_ID%TYPE,
  i_workshop_name IN WORKSHOPS.WORKSHOP_NAME%TYPE,
  i_start_time IN WORKSHOPS.START_TIME%TYPE,
  i_end_time IN WORKSHOPS.END_TIME%TYPE,
  i_price IN WORKSHOPS.PRICE%TYPE,
  i_limit IN WORKSHOPS.LIMIT%TYPE
) AS
BEGIN
  INSERT INTO WORKSHOPS(CONF_DAY_ID, WORKSHOP_NAME, START_TIME, END_TIME, PRICE, LIMIT)
    VALUES(i_conf_day_id, i_workshop_name, i_start_time, i_end_time, i_price, i_limit);
END;


CREATE OR REPLACE PROCEDURE ADD_PRICE(
  i_conf_id IN PRICES.CONFERENCE_ID%TYPE,
  i_discount IN PRICES.DISCOUNT%TYPE,
  i_end_date IN PRICES.END_DATE%TYPE
) AS
BEGIN
  INSERT INTO PRICES(CONFERENCE_ID, DISCOUNT, END_DATE)
    VALUES(i_conf_id, i_discount, i_end_date);
END;


CREATE OR REPLACE PROCEDURE ADD_CLIENT(
  i_is_company IN CLIENTS.IS_COMPANY%TYPE DEFAULT 'N',
  i_client_name IN CLIENTS.CLIENT_NAME%TYPE,
  i_country IN CLIENTS.COUNTRY%TYPE DEFAULT NULL,
  i_city IN CLIENTS.CITY%TYPE DEFAULT NULL,
  i_address IN CLIENTS.ADDRESS%TYPE DEFAULT NULL,
  i_phone IN CLIENTS.PHONE%TYPE DEFAULT NULL,
  i_email IN CLIENTS.EMAIL%TYPE,
  i_password IN CLIENTS.PASSWORD%TYPE
) AS
BEGIN
  INSERT INTO CLIENTS(IS_COMPANY, CLIENT_NAME, COUNTRY, CITY, ADDRESS, PHONE, EMAIL, PASSWORD)
    VALUES(i_is_company, i_client_name, i_country, i_city, i_address, i_phone, i_email, i_password);
END;


CREATE OR REPLACE PROCEDURE ADD_PAYMENT(
  i_booking_id IN PAYMENTS.BOOKING_ID%TYPE,
  i_payment_date IN PAYMENTS.PAYMENT_DATE%TYPE,
  i_value IN PAYMENTS.VALUE%TYPE,
  i_means IN PAYMENTS.MEANS%TYPE
) AS
BEGIN
  INSERT INTO PAYMENTS(BOOKING_ID, PAYMENT_DATE, VALUE, MEANS)
    VALUES(i_booking_id, i_payment_date, i_value, i_means);
END;


CREATE OR REPLACE PROCEDURE UPDATE_CONFERENCE(
  i_conf_id IN CONFERENCES.CONFERENCE_ID%TYPE,
  i_conference_name IN CONFERENCES.CONFERENCE_NAME%TYPE DEFAULT NULL,
  i_country IN CONFERENCES.COUNTRY%TYPE DEFAULT NULL,
  i_city IN CONFERENCES.CITY%TYPE DEFAULT NULL,
  i_address IN CONFERENCES.ADDRESS%TYPE DEFAULT NULL,
  i_student_discount IN CONFERENCES.STUDENT_DISCOUNT%TYPE DEFAULT NULL
) AS
  l_conf_count INTEGER;
BEGIN
  -- TODO: Is this necessary? Or just fail silently on wrong conference ID?
  BEGIN
    SELECT COUNT(*) INTO l_conf_count
    FROM CONFERENCES
    WHERE CONFERENCES.CONFERENCE_ID = i_conf_id;
  END;

  IF (l_conf_count = 0) THEN
    RAISE_APPLICATION_ERROR(-20400, 'Wrong conference_id!');
  ELSE
    UPDATE CONFERENCES
      SET CONFERENCE_NAME = NVL(i_conference_name, CONFERENCE_NAME),
          COUNTRY = NVL(i_country, COUNTRY),
          CITY = NVL(i_city, CITY),
          ADDRESS = NVL(i_address, ADDRESS),
          STUDENT_DISCOUNT = NVL(i_student_discount, STUDENT_DISCOUNT)
    WHERE CONFERENCES.CONFERENCE_ID = i_conf_id;
  END IF;
END;


CREATE OR REPLACE PROCEDURE UPDATE_CONF_DAY(
  i_conf_day_id IN CONFERENCE_DAYS.CONF_DAY_ID%TYPE,
  i_price IN CONFERENCE_DAYS.PRICE%TYPE DEFAULT NULL,
  i_limit IN CONFERENCE_DAYS.LIMIT%TYPE DEFAULT NULL
) AS
  l_conf_day_count INTEGER;
BEGIN
  BEGIN
    SELECT COUNT(*) INTO l_conf_day_count
    FROM CONFERENCE_DAYS
    WHERE CONFERENCE_DAYS.CONFERENCE_ID = i_conf_day_id;
  END;

  IF (l_conf_day_count = 0) THEN
    RAISE_APPLICATION_ERROR(-20401, 'Wrong conf_day_id!');
  ELSE
    UPDATE CONFERENCE_DAYS
      SET PRICE = NVL(i_price, PRICE),
          LIMIT = NVL(i_limit, LIMIT)
    WHERE CONFERENCE_DAYS.CONF_DAY_ID = i_conf_day_id;
  END IF;
END;


CREATE OR REPLACE PROCEDURE UPDATE_WORKSHOPS(
  i_workshop_id IN WORKSHOPS.WORKSHOP_ID%TYPE,
  i_workshop_name IN WORKSHOPS.WORKSHOP_NAME%TYPE DEFAULT NULL,
  i_price IN WORKSHOPS.PRICE%TYPE DEFAULT NULL,
  i_limit IN WORKSHOPS.LIMIT%TYPE DEFAULT NULL
) AS
  l_workshop_count INTEGER;
BEGIN
  BEGIN
    SELECT COUNT(*) INTO l_workshop_count
    FROM WORKSHOPS
    WHERE WORKSHOPS.WORKSHOP_ID = i_workshop_id;
  END;

  IF (l_workshop_count = 0) THEN
    RAISE_APPLICATION_ERROR(-20402, 'Wrong workshop_id!');
  ELSE
    UPDATE WORKSHOPS
      SET WORKSHOP_NAME = NVL(i_workshop_name, WORKSHOP_NAME),
          PRICE = NVL(i_price, PRICE),
          LIMIT = NVL(i_limit, LIMIT)
      WHERE WORKSHOPS.WORKSHOP_ID = i_workshop_id;
  END IF;
END;


CREATE OR REPLACE PROCEDURE DELETE_CONFERENCE(
  i_conf_id IN CONFERENCES.CONFERENCE_ID%TYPE
) AS
  l_conf_count INTEGER;
BEGIN
  BEGIN
    SELECT COUNT(*) INTO l_conf_count
    FROM CONFERENCES
    WHERE CONFERENCES.CONFERENCE_ID = i_conf_id;
  END;

  IF (l_conf_count = 0) THEN
    RAISE_APPLICATION_ERROR(-20403, 'Wrong conf_id!');
  ELSE
    DELETE FROM CONFERENCES
    WHERE CONFERENCES.CONFERENCE_ID = i_conf_id;
  END IF;
END;

CREATE OR REPLACE PROCEDURE DELETE_CONF_DAY(
  i_conf_day_id IN CONFERENCE_DAYS.CONF_DAY_ID%TYPE
) AS
  l_conf_day_count INTEGER;
BEGIN
  BEGIN
    SELECT COUNT(*) INTO l_conf_day_count
    FROM CONFERENCE_DAYS
    WHERE CONFERENCE_DAYS.CONF_DAY_ID = i_conf_day_id;
  END;

  IF (l_conf_day_count = 0) THEN
    RAISE_APPLICATION_ERROR(-20404, 'Wrong conf_day_id!');
  ELSE
    DELETE FROM CONFERENCE_DAYS
    WHERE CONFERENCE_DAYS.CONF_DAY_ID = i_conf_day_id;
  END IF;
END;


CREATE OR REPLACE PROCEDURE DELETE_WORKSHOP(
  i_workshop_id IN WORKSHOPS.WORKSHOP_ID%TYPE
) AS
  l_workshop_count INTEGER;
BEGIN
  BEGIN
    SELECT COUNT(*) INTO l_workshop_count
    FROM WORKSHOPS
    WHERE WORKSHOPS.WORKSHOP_ID = i_workshop_id;
  END;

  IF (l_workshop_count = 0) THEN
    RAISE_APPLICATION_ERROR(-20405, 'Wrong workshop_id!');
  ELSE
    DELETE FROM WORKSHOPS
    WHERE WORKSHOPS.WORKSHOP_ID = i_workshop_id;
  END IF;
END;



/* FUNCTIONS */



CREATE OR REPLACE FUNCTION AVAILABLE_CONF_DAY_PLACES_COUNT(
  i_conf_day_id IN CONFERENCE_DAYS.CONF_DAY_ID%TYPE
) RETURN INTEGER AS
  l_taken INTEGER := 0;
  l_total CONFERENCE_DAYS.LIMIT%TYPE;
BEGIN
  BEGIN
    SELECT LIMIT INTO l_total
    FROM CONFERENCE_DAYS
    WHERE CONFERENCE_DAYS.CONF_DAY_ID = i_conf_day_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20500, 'Incorrect conf_day_id provided!');
  END;

  BEGIN
    SELECT SUM(NUMBER_OF_ATTENDEES) INTO l_taken
    FROM CONF_DAY_BOOKINGS
    WHERE CONF_DAY_BOOKINGS.CONF_DAY_ID = i_conf_day_id;
  END;

  l_total := l_total - l_taken;
  RETURN l_total;
END;


CREATE OR REPLACE FUNCTION AVAILABLE_WORKSHOP_PLACES_COUNT(
  i_workshop_id IN WORKSHOPS.WORKSHOP_ID%TYPE
) RETURN INTEGER AS
  l_taken INTEGER := 0;
  l_total WORKSHOPS.LIMIT%TYPE;
BEGIN
  BEGIN
    SELECT LIMIT INTO l_total
    FROM WORKSHOPS
    WHERE WORKSHOPS.WORKSHOP_ID = i_workshop_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20501, 'Incorrect workshop_id provided!');
  END;

  BEGIN
    SELECT SUM(NUMBER_OF_ATTENDEES) INTO l_taken
    FROM WORKSHOP_BOOKINGS
    WHERE WORKSHOP_BOOKINGS.WORKSHOP_ID = i_workshop_id;
  END;

  l_total := l_total - l_taken;
  RETURN l_total;
END;


CREATE OR REPLACE FUNCTION WORKSHOPS_OVERLAP(
  i_workshop_id1 IN WORKSHOPS.WORKSHOP_ID%TYPE,
  i_workshop_id2 IN WORKSHOPS.WORKSHOP_ID%TYPE
) RETURN BOOLEAN AS
  l_start1 WORKSHOPS.START_TIME%TYPE;
  l_end1 WORKSHOPS.END_TIME%TYPE;
  l_start2 WORKSHOPS.START_TIME%TYPE;
  l_end2 WORKSHOPS.END_TIME%TYPE;
BEGIN
  BEGIN
    SELECT START_TIME, END_TIME INTO l_start1, l_end1
    FROM WORKSHOPS
    WHERE WORKSHOPS.WORKSHOP_ID = i_workshop_id1;
    SELECT START_TIME, END_TIME INTO l_start2, l_end2
    FROM WORKSHOPS
    WHERE WORKSHOPS.WORKSHOP_ID = i_workshop_id2;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20502, 'Incorrect workshop_id provided!');
  END;

  IF (l_end1 <= l_start2 OR l_end2 <= l_start1) THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;
END;


CREATE OR REPLACE FUNCTION CAN_DELETE_CONF_DAY(
  i_conf_day_id IN CONFERENCE_DAYS.CONF_DAY_ID%TYPE
) RETURN BOOLEAN AS
  l_total CONFERENCE_DAYS.LIMIT%TYPE;
  l_available INTEGER := AVAILABLE_CONF_DAY_PLACES_COUNT(i_conf_day_id);
BEGIN
  BEGIN
    SELECT LIMIT INTO l_total
    FROM CONFERENCE_DAYS
    WHERE CONFERENCE_DAYS.CONF_DAY_ID = i_conf_day_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20503, 'Wrong conf_day_id provided!');
  END;

  IF (l_available < l_total) THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;
END;


-- CREATE OR REPLACE PACKAGE ...? AS ...!
-- TODO: PROCEDURE_NAME_P??