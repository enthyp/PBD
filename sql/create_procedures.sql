CREATE PROCEDURE ADD_CONFERENCE(
  conf_name IN CONFERENCES.CONFERENCE_NAME%TYPE,
  country IN CONFERENCES.COUNTRY%TYPE,
  city IN CONFERENCES.CITY%TYPE,
  address IN CONFERENCES.ADDRESS%TYPE,
  first_day IN CONFERENCES.FIRST_DAY%TYPE,
  last_day IN CONFERENCES.LAST_DAY%TYPE,
  student_discount IN CONFERENCES.STUDENT_DISCOUNT%TYPE DEFAULT 0
) AS
BEGIN
  INSERT INTO CONFERENCES(CONFERENCE_NAME, COUNTRY, CITY, ADDRESS, FIRST_DAY, LAST_DAY, STUDENT_DISCOUNT)
    VALUES(conf_name, country, city, address, first_day, last_day, student_discount);
END;


CREATE PROCEDURE ADD_CONFERENCE_DAY(
  conf_id IN CONFERENCE_DAYS.CONFERENCE_ID%TYPE,
  price IN CONFERENCE_DAYS.PRICE%TYPE,
  limit IN CONFERENCE_DAYS.LIMIT%TYPE,
  day_date IN CONFERENCE_DAYS.DAY_DATE%TYPE
) AS
BEGIN
  INSERT INTO CONFERENCE_DAYS(CONFERENCE_ID, PRICE, LIMIT, DAY_DATE)
    VALUES(conf_id, price, limit, day_date);
END;


CREATE PROCEDURE ADD_WORKSHOPS(
  conf_day_id IN WORKSHOPS.CONF_DAY_ID%TYPE,
  workshop_name IN WORKSHOPS.WORKSHOP_NAME%TYPE,
  start_time IN WORKSHOPS.START_TIME%TYPE,
  end_time IN WORKSHOPS.END_TIME%TYPE,
  price IN WORKSHOPS.PRICE%TYPE,
  limit IN WORKSHOPS.LIMIT%TYPE
) AS
BEGIN
  INSERT INTO WORKSHOPS(CONF_DAY_ID, WORKSHOP_NAME, START_TIME, END_TIME, PRICE, LIMIT)
    VALUES(conf_day_id, workshop_name, start_time, end_time, price, limit);
END;


CREATE PROCEDURE ADD_PRICE(
  conf_id IN PRICES.CONFERENCE_ID%TYPE,
  discount IN PRICES.DISCOUNT%TYPE,
  end_date IN PRICES.END_DATE%TYPE
) AS
BEGIN
  INSERT INTO PRICES(CONFERENCE_ID, DISCOUNT, END_DATE)
    VALUES(conf_id, discount, end_date);
END;


CREATE PROCEDURE ADD_CLIENT(
  is_company IN CLIENTS.IS_COMPANY%TYPE DEFAULT 'N',
  client_name IN CLIENTS.CLIENT_NAME%TYPE,
  country IN CLIENTS.COUNTRY%TYPE DEFAULT NULL,
  city IN CLIENTS.CITY%TYPE DEFAULT NULL,
  address IN CLIENTS.ADDRESS%TYPE DEFAULT NULL,
  phone IN CLIENTS.PHONE%TYPE DEFAULT NULL,
  email IN CLIENTS.EMAIL%TYPE,
  password IN CLIENTS.PASSWORD%TYPE
) AS
BEGIN
  INSERT INTO CLIENTS(IS_COMPANY, CLIENT_NAME, COUNTRY, CITY, ADDRESS, PHONE, EMAIL, PASSWORD)
    VALUES(is_company, client_name, country, city, address, phone, email, password);
END;


CREATE PROCEDURE ADD_PAYMENT(
  booking_id IN PAYMENTS.BOOKING_ID%TYPE,
  payment_date IN PAYMENTS.PAYMENT_DATE%TYPE,
  value IN PAYMENTS.VALUE%TYPE,
  means IN PAYMENTS.MEANS%TYPE
) AS
BEGIN
  INSERT INTO PAYMENTS(BOOKING_ID, PAYMENT_DATE, VALUE, MEANS)
    VALUES(booking_id, payment_date, value, means);
END;


CREATE FUNCTION AVAILABLE_CONF_DAY_PLACES_COUNT(
  conf_day_id IN CONFERENCE_DAYS.CONF_DAY_ID%TYPE
) RETURN INTEGER AS
  taken INTEGER := 0;
  total CONFERENCE_DAYS.LIMIT%TYPE;
BEGIN
  BEGIN
    SELECT LIMIT INTO total
    FROM CONFERENCE_DAYS
    WHERE CONF_DAY_ID = conf_day_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20500, 'Incorrect CONF_DAY_ID provided!');
  END;

  BEGIN
    SELECT SUM(NUMBER_OF_ATTENDEES) INTO taken
    FROM CONF_DAY_BOOKINGS
    WHERE CONF_DAY_ID = conf_day_id;
  END;

  total := total - taken;
  RETURN total;
END;

CREATE FUNCTION AVAILABLE_WORKSHOP_PLACES_COUNT(
  workshop_id IN WORKSHOPS.WORKSHOP_ID%TYPE
) RETURN INTEGER AS
  taken INTEGER := 0;
  total WORKSHOPS.LIMIT%TYPE;
BEGIN
  BEGIN
    SELECT LIMIT INTO total
    FROM WORKSHOPS
    WHERE WORKSHOP_ID = workshop_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20501, 'Incorrect WORKSHOP_ID provided!');
  END;

  BEGIN
    SELECT SUM(NUMBER_OF_ATTENDEES) INTO taken
    FROM WORKSHOP_BOOKINGS
    WHERE WORKSHOP_ID = workshop_id;
  END;

  total := total - taken;
  RETURN total;
END;


-- CREATE PACKAGE ...? AS ...!