
-- Client Statistics
CREATE VIEW Client_Statistic_View_V AS
SELECT CLIENT_NAME,
       COUNT(*)           AS NumberOfBooking,
       SUM(VALUE)         AS Total_Payment,
       AVG(VaLUE)         AS Average_Payment,
       COUNT(ATTENDEE_ID) AS Number_Of_Attendees
FROM CLIENTS
       JOIN BOOKINGS ON CLIENTS.CLIENT_ID = BOOKINGS.CLIENT_ID
       JOIN PAYMENTS ON BOOKINGS.BOOKING_ID = PAYMENTS.BOOKING_ID
       JOIN PARTICIPATION_CONF_DAYS ON BOOKINGS.BOOKING_ID = PARTICIPATION_CONF_DAYS.BOOKING_ID
GROUP BY BOOKINGS.CLIENT_ID, CLIENT_NAME

-- Most frequent clients --
CREATE VIEW MOST_FREQUENT_CLIENTS_V AS
SELECT CLIENTS.CLIENT_ID, CLIENT_NAME, COUNT(*) AS "TRANSACTION_NO"
FROM CLIENTS
  JOIN BOOKINGS ON BOOKINGS.CLIENT_ID = CLIENTS.CLIENT_ID
GROUP BY CLIENTS.CLIENT_ID,
         CLIENT_NAME
ORDER BY COUNT(*) DESC;


-- Clients default on payment --
CREATE VIEW CLIENTS_DEFAULT_ON_PAYMENT_V AS
SELECT CLIENTS.CLIENT_ID, CLIENT_NAME
FROM CLIENTS
  JOIN BOOKINGS ON BOOKINGS.CLIENT_ID = CLIENTS.CLIENT_ID
WHERE BOOKING_ID NOT IN (SELECT BOOKING_ID
                         FROM PAYMENTS)
ORDER BY CLIENT_NAME;


-- Available conferences --
CREATE VIEW AVAILABLE_CONFERENCES_V AS
SELECT CONFERENCES.CONFERENCE_ID,
       CONFERENCE_NAME
FROM CONFERENCES
  JOIN CONFERENCE_DAYS ON CONFERENCES.CONFERENCE_ID = CONFERENCE_DAYS.CONFERENCE_ID
  JOIN CONF_DAY_BOOKINGS ON CONF_DAY_BOOKINGS.CONF_DAY_ID = CONFERENCE_DAYS.CONF_DAY_ID
GROUP BY CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         CONF_DAY_BOOKINGS.CONF_DAY_ID,
         LIMIT
HAVING LIMIT > SUM(NUMBER_OF_ATTENDEES)
ORDER BY CONFERENCE_NAME;


-- Available conference days --
CREATE VIEW AVAILABLE_CONFERENCE_DAYS_V AS
SELECT CONFERENCES.CONFERENCE_ID,
       CONFERENCE_NAME,
       CONFERENCE_DAYS.CONF_DAY_ID,
       DAY_DATE
FROM CONFERENCE_DAYS
  JOIN CONF_DAY_BOOKINGS ON CONFERENCE_DAYS.CONF_DAY_ID = CONF_DAY_BOOKINGS.CONF_DAY_ID
  JOIN CONFERENCES ON CONFERENCE_DAYS.CONFERENCE_ID = CONFERENCES.CONFERENCE_ID
GROUP BY CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         CONFERENCE_DAYS.CONF_DAY_ID,
         DAY_DATE,
         LIMIT
HAVING LIMIT > SUM(NUMBER_OF_ATTENDEES)
ORDER BY CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         DAY_DATE;


-- Available workshops --
CREATE VIEW AVAILABLE_WORKSHOPS_V AS
SELECT CONFERENCES.CONFERENCE_ID,
       CONFERENCE_NAME,
       WORKSHOPS.WORKSHOP_ID,
       WORKSHOP_NAME,
       DAY_DATE
FROM WORKSHOPS
  JOIN WORKSHOP_BOOKINGS ON WORKSHOPS.WORKSHOP_ID = WORKSHOP_BOOKINGS.WORKSHOP_ID
  JOIN CONFERENCE_DAYS ON WORKSHOPS.CONF_DAY_ID = CONFERENCE_DAYS.CONF_DAY_ID
  JOIN CONFERENCES ON CONFERENCES.CONFERENCE_ID = CONFERENCE_DAYS.CONFERENCE_ID
GROUP BY WORKSHOPS.WORKSHOP_ID,
         CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         WORKSHOPS.LIMIT,
         WORKSHOP_NAME,
         DAY_DATE
HAVING WORKSHOPS.LIMIT > SUM(NUMBER_OF_ATTENDEES)
ORDER BY CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         WORKSHOP_ID,
         WORKSHOP_NAME,
         DAY_DATE;


-- Attendance lists for coming conference days --
CREATE VIEW PARTICIPATION_CONFERENCE_DAYS_V AS
SELECT ATTENDEES.ATTENDEE_ID,
       FIRST_NAME,
       LAST_NAME,
       CONFERENCES.CONFERENCE_ID,
       CONFERENCE_NAME,
       CONFERENCE_DAYS.CONF_DAY_ID,
       DAY_DATE
FROM PARTICIPATION_CONF_DAYS
  JOIN ATTENDEES ON PARTICIPATION_CONF_DAYS.ATTENDEE_ID = ATTENDEES.ATTENDEE_ID
  JOIN CONFERENCE_DAYS ON PARTICIPATION_CONF_DAYS.CONF_DAY_ID = CONFERENCE_DAYS.CONF_DAY_ID
  JOIN CONFERENCES ON CONFERENCE_DAYS.CONFERENCE_ID = CONFERENCES.CONFERENCE_ID
WHERE DAY_DATE > CURRENT_DATE
ORDER BY CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         DAY_DATE;


-- Attendance lists for coming workshops --
CREATE VIEW PARTICIPATION_WORKSHOPS_V AS
SELECT A.ATTENDEE_ID,
       FIRST_NAME,
       LAST_NAME,
       C.CONFERENCE_ID,
       CONFERENCE_NAME,
       W.WORKSHOP_ID,
       WORKSHOP_NAME,
       DAY_DATE
FROM PARTICIPATION_WORKSHOPS PW
  JOIN PARTICIPATION_CONF_DAYS PCD ON PCD.PARTICIPATION_CONF_DAY_ID = PW.PARTICIPATION_CONF_DAY_ID
  JOIN ATTENDEES A ON PCD.ATTENDEE_ID = A.ATTENDEE_ID
  JOIN WORKSHOPS W ON W.WORKSHOP_ID = PW.WORKSHOP_ID
  JOIN CONFERENCE_DAYS CD ON PCD.CONF_DAY_ID = CD.CONF_DAY_ID
  JOIN CONFERENCES C ON CD.CONFERENCE_ID = C.CONFERENCE_ID
WHERE DAY_DATE > CURRENT_DATE
ORDER BY C.CONFERENCE_ID,
         C.CONFERENCE_NAME,
         W.WORKSHOP_ID,
         W.WORKSHOP_NAME,
         DAY_DATE;


-- Clients who did not provide full attendee data on time --
-- CREATE VIEW CLIENTS_MISSING_ATTENDEE_DATA_V AS
-- SELECT CLIENT_NAME
-- FROM CLIENTS C
--   JOIN BOOKINGS B ON C.CLIENT_ID = B.CLIENT_ID
--   JOIN PARTICIPATION_CONF_DAYS PCD ON B.BOOKING_ID = PCD.BOOKING_ID
--   JOIN CONFERENCE_DAYS CD ON CD.CONF_DAY_ID = PCD.CONF_DAY_ID
-- WHERE ATTENDEE_ID IN (SELECT ATTENDEE_ID
--                       FROM ATTENDEES
--                       WHERE (FIRST_NAME IS NULL OR LAST_NAME IS NULL))
--       AND CURRENT_DATE - DAY_DATE  > 14

-- TODO: Add general client stats --
