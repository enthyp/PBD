-- Most frequent clients --
CREATE VIEW MOST_FREQUENT_CLIENTS_V AS
SELECT CLIENTS.CLIENT_ID, CLIENT_NAME, COUNT(*) AS "TRANSACTION_NO"
FROM CLIENTS
  JOIN BOOKINGS ON BOOKINGS.CLIENT_ID = CLIENTS.CLIENT_ID
  WHERE IS_CANCELLED = 'N'
GROUP BY CLIENTS.CLIENT_ID,
         CLIENT_NAME
ORDER BY COUNT(*) DESC


-- Clients default on payment --
CREATE VIEW CLIENTS_DEFAULT_ON_PAYMENT_V AS
SELECT CL.CLIENT_ID, CLIENT_NAME, CON.CONFERENCE_ID, CON.CONFERENCE_NAME
FROM CLIENTS CL
  JOIN BOOKINGS B ON B.CLIENT_ID = CL.CLIENT_ID
  JOIN CONFERENCES CON ON B.CONFERENCE_ID = CON.CONFERENCE_ID
WHERE BOOKING_ID NOT IN (SELECT BOOKING_ID
                         FROM PAYMENTS)
      AND CURRENT_DATE - BOOKING_DATE > 7
ORDER BY CLIENT_NAME;


-- Available conferences --
CREATE VIEW AVAILABLE_CONFERENCES_V AS
SELECT CONFERENCES.CONFERENCE_ID,
       CONFERENCE_NAME
FROM CONFERENCES
  JOIN CONFERENCE_DAYS ON CONFERENCES.CONFERENCE_ID = CONFERENCE_DAYS.CONFERENCE_ID
  JOIN CONF_DAY_BOOKINGS ON CONF_DAY_BOOKINGS.CONF_DAY_ID = CONFERENCE_DAYS.CONF_DAY_ID
GROUP BY CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         CONF_DAY_BOOKINGS.CONF_DAY_ID,
         LIMIT
HAVING LIMIT > SUM(NUMBER_OF_ATTENDEES)
ORDER BY CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME;


-- Available conference days --
CREATE VIEW AVAILABLE_CONFERENCE_DAYS_V AS
SELECT CONFERENCES.CONFERENCE_ID,
       CONFERENCE_NAME,
       CONFERENCE_DAYS.CONF_DAY_ID,
       DAY_DATE
FROM CONFERENCE_DAYS
  JOIN CONF_DAY_BOOKINGS ON CONFERENCE_DAYS.CONF_DAY_ID = CONF_DAY_BOOKINGS.CONF_DAY_ID
  JOIN CONFERENCES ON CONFERENCE_DAYS.CONFERENCE_ID = CONFERENCES.CONFERENCE_ID
GROUP BY CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         CONFERENCE_DAYS.CONF_DAY_ID,
         DAY_DATE,
         LIMIT
HAVING LIMIT > SUM(NUMBER_OF_ATTENDEES)
ORDER BY CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         DAY_DATE;


-- Available workshops --
CREATE VIEW AVAILABLE_WORKSHOPS_V AS
SELECT CONFERENCES.CONFERENCE_ID,
       CONFERENCE_NAME,
       WORKSHOPS.WORKSHOP_ID,
       WORKSHOP_NAME,
       DAY_DATE
FROM WORKSHOPS
  JOIN WORKSHOP_BOOKINGS ON WORKSHOPS.WORKSHOP_ID = WORKSHOP_BOOKINGS.WORKSHOP_ID
  JOIN CONFERENCE_DAYS ON WORKSHOPS.CONF_DAY_ID = CONFERENCE_DAYS.CONF_DAY_ID
  JOIN CONFERENCES ON CONFERENCES.CONFERENCE_ID = CONFERENCE_DAYS.CONFERENCE_ID
GROUP BY WORKSHOPS.WORKSHOP_ID,
         CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         WORKSHOPS.LIMIT,
         WORKSHOP_NAME,
         DAY_DATE
HAVING WORKSHOPS.LIMIT > SUM(NUMBER_OF_ATTENDEES)
ORDER BY CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         WORKSHOP_ID,
         WORKSHOP_NAME,
         DAY_DATE;


-- Attendance lists for  conference days --
  CREATE VIEW PARTICIPATION_CONFERENCE_DAYS_V AS
SELECT ATTENDEES.ATTENDEE_ID,
       FIRST_NAME,
       LAST_NAME,
       CONFERENCES.CONFERENCE_ID,
       CONFERENCE_NAME,
       CONFERENCE_DAYS.CONF_DAY_ID,
       DAY_DATE
FROM PARTICIPATION_CONF_DAYS
  JOIN ATTENDEES ON PARTICIPATION_CONF_DAYS.ATTENDEE_ID = ATTENDEES.ATTENDEE_ID
  JOIN CONFERENCE_DAYS ON PARTICIPATION_CONF_DAYS.CONF_DAY_ID = CONFERENCE_DAYS.CONF_DAY_ID
  JOIN CONFERENCES ON CONFERENCE_DAYS.CONFERENCE_ID = CONFERENCES.CONFERENCE_ID
ORDER BY CONFERENCES.CONFERENCE_ID,
         CONFERENCE_NAME,
         DAY_DATE;


-- Attendance lists for  workshops --
CREATE  VIEW PARTICIPATION_WORKSHOPS_V AS
SELECT A.ATTENDEE_ID,
       FIRST_NAME,
       LAST_NAME,
       C.CONFERENCE_ID,
       CONFERENCE_NAME,
       W.WORKSHOP_ID,
       WORKSHOP_NAME,
       DAY_DATE
FROM PARTICIPATION_WORKSHOPS PW
  JOIN PARTICIPATION_CONF_DAYS PCD ON PCD.PARTICIPATION_CONF_DAY_ID = PW.PARTICIPATION_CONF_DAY_ID
  JOIN ATTENDEES A ON PCD.ATTENDEE_ID = A.ATTENDEE_ID
  JOIN WORKSHOPS W ON W.WORKSHOP_ID = PW.WORKSHOP_ID
  JOIN CONFERENCE_DAYS CD ON PCD.CONF_DAY_ID = CD.CONF_DAY_ID
  JOIN CONFERENCES C ON CD.CONFERENCE_ID = C.CONFERENCE_ID
ORDER BY C.CONFERENCE_ID,
         C.CONFERENCE_NAME,
         W.WORKSHOP_ID,
         W.WORKSHOP_NAME,
         DAY_DATE;


-- General client stats --
CREATE OR REPLACE VIEW CLIENT_STATISTICS_V AS
SELECT C.CLIENT_ID,
       CLIENT_NAME,
       AVG(VALUE)                                AS PAYMENT_AVG,
       CONFERENCE_PLACES_BOOKED_AVG(C.CLIENT_ID) AS AVG_CONF_DAY_PLACES,
       WORKSHOP_PLACES_BOOKED_AVG(C.CLIENT_ID)   AS AVG_WORKSHOP_PLACES
FROM CLIENTS C
  JOIN BOOKINGS B ON C.CLIENT_ID = B.CLIENT_ID
  JOIN PAYMENTS P on B.BOOKING_ID = P.BOOKING_ID
GROUP BY C.CLIENT_ID, C.CLIENT_NAME;


-- Clients who did not provide full attendee data on time --
CREATE VIEW CLIENTS_MISSING_ATTENDEE_DATA_V AS
SELECT DISTINCT C.CLIENT_ID,
                C.CLIENT_NAME,
                C.PHONE,
                CON.CONFERENCE_NAME,
                '' AS EVENT_NAME,
                CD.DAY_DATE
FROM CLIENTS C
  JOIN BOOKINGS B ON C.CLIENT_ID = B.CLIENT_ID
  JOIN CONFERENCES CON ON B.CONFERENCE_ID = CON.CONFERENCE_ID
  JOIN CONF_DAY_BOOKINGS CDB ON B.BOOKING_ID = CDB.BOOKING_ID
  JOIN CONFERENCE_DAYS CD ON CDB.CONF_DAY_ID = CD.CONF_DAY_ID
WHERE (CONF_DAY_PARTICIPANTS_COUNT(CDB.CONF_DAY_ID, B.BOOKING_ID, 'Y')
         < CDB.NUMBER_OF_STUDENTS
       OR CONF_DAY_PARTICIPANTS_COUNT(CDB.CONF_DAY_ID, B.BOOKING_ID, 'N')
            < CDB.NUMBER_OF_ATTENDEES - CDB.NUMBER_OF_STUDENTS)
       AND CON.FIRST_DAY - CURRENT_DATE < 14
UNION
SELECT DISTINCT C.CLIENT_ID,
                C.CLIENT_NAME,
                C.PHONE,
                CON.CONFERENCE_NAME,
                W.WORKSHOP_NAME AS EVENT_NAME,
                TRUNC(W.START_TIME)
FROM CLIENTS C
  JOIN BOOKINGS B ON C.CLIENT_ID = B.CLIENT_ID
  JOIN CONFERENCES CON ON B.CONFERENCE_ID = CON.CONFERENCE_ID
  JOIN CONF_DAY_BOOKINGS CDB ON B.BOOKING_ID = CDB.BOOKING_ID
  JOIN WORKSHOP_BOOKINGS WB ON CDB.CONF_DAY_BOOKING_ID = WB.CONF_DAY_BOOKING_ID
  JOIN WORKSHOPS W ON WB.WORKSHOP_ID = W.WORKSHOP_ID
WHERE (WORKSHOP_PARTICIPANTS_COUNT(W.WORKSHOP_ID, B.BOOKING_ID, 'Y')
         < WB.NUMBER_OF_STUDENTS
       OR WORKSHOP_PARTICIPANTS_COUNT(W.WORKSHOP_ID, B.BOOKING_ID, 'N')
            < WB.NUMBER_OF_ATTENDEES - CDB.NUMBER_OF_STUDENTS)
       AND CON.FIRST_DAY - CURRENT_DATE < 14
